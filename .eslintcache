[{"/Users/TCorb3/Code/misc/fast/src/reportWebVitals.js":"1","/Users/TCorb3/Code/misc/fast/src/App.js":"2","/Users/TCorb3/Code/misc/fast/src/index.js":"3","/Users/TCorb3/Code/misc/fast/src/components/Search/Search.js":"4","/Users/TCorb3/Code/misc/fast/src/utils/helpers.js":"5"},{"size":362,"mtime":1609216454103,"results":"6","hashOfConfig":"7"},{"size":1091,"mtime":1609371600329,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1609216454102,"results":"9","hashOfConfig":"7"},{"size":2604,"mtime":1609371244474,"results":"10","hashOfConfig":"7"},{"size":74,"mtime":1609366865628,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1odhb4m",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/TCorb3/Code/misc/fast/src/reportWebVitals.js",[],["24","25"],"/Users/TCorb3/Code/misc/fast/src/App.js",[],"/Users/TCorb3/Code/misc/fast/src/index.js",[],"/Users/TCorb3/Code/misc/fast/src/components/Search/Search.js",["26"],"import React, { useState } from 'react';\nimport './Search.scss';\nimport { getApiKey } from '../../utils/helpers';\nimport { AiOutlineLoading3Quarters as LoadingSpinner } from 'react-icons/ai';\n\nconst Search = ({ updateSelectedMovies }) => {\n  const [movieName, setMovieName] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleResultClick = result => {\n    const { Title } = result;\n\n    updateSelectedMovies(Title);\n  }\n\n  // TODO: Move this into it's own file\n  const handleSearchClicked = async e => {\n    e.preventDefault();\n\n    setIsLoading(true);\n    const res = await fetch(`http://www.omdbapi.com/?apikey=${getApiKey()}&s=${movieName}`);\n    console.log(res, 'res');\n\n    // Make sure base network request is working fine\n    if (res.status === 200) {\n      const json = await res.json();\n      console.log(json, 'json');\n\n      // Make sure there's actually movies with your search\n      if (json.Response !== \"False\") {\n        setSearchResults(json.Search);\n        setError(null);\n      }\n      else {\n        setError(json.Error);\n      }\n    }\n\n    setIsLoading(false);    \n  };\n  \n  return (\n    <section className='Search'>\n      <form>\n        <h2>Search by movie or series title</h2>\n        <input \n          type='text'\n          placeholder='Harry Potter'\n          onChange={e => setMovieName(e.target.value)}\n          maxLength={40}\n        />\n        <button\n          onClick={e => handleSearchClicked(e)}\n          type='submit'\n        >\n          Search\n        </button>\n      </form>\n      <ResultsDisplay \n        searchResults={searchResults}\n        isLoading={isLoading}\n        error={error}\n        handleResultClick={handleResultClick}\n      />\n    </section>\n  );\n};\n\nexport default Search;\n\n// TODO: Move ResultsDisplay and Result into their own file\nconst ResultsDisplay = ({ searchResults, isLoading, error, handleResultClick }) => {\n\n  if (isLoading) return <LoadingSpinner className='spinner rotating'/>;\n\n  if (error) return <p className='error'>{error}</p>;\n\n  return (\n    <div className='ResultsDisplay'>\n      <ul>\n        {searchResults.map(result => <Result handleResultClick={handleResultClick} key={result.imdbID} result={result}/>)}\n      </ul>\n    </div>\n  );\n};\n\nconst Result = ({ result, handleResultClick }) => {\n  return (\n    <li className='Result' onClick={() => handleResultClick(result)}>\n      <img src={result.Poster} alt={`${result.Title} poster image`}/>\n      <h3>{result.Title}</h3>\n    </li>\n  );\n};\n","/Users/TCorb3/Code/misc/fast/src/utils/helpers.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":92,"column":7,"nodeType":"33","endLine":92,"endColumn":70},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]